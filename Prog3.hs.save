{-
##########################################################################################
  Prog3.hs
  Zachary Hansen, February 19th, 2019
##########################################################################################
-}

--module Prog3.hs where

import Data.Char

sumLastPart :: Int ->  [Int] -> Int
sumLastPart y  nums  
  |nums /= [] = sum((drop((length nums)-y) nums)) 
  |otherwise = error "Invalid Input"


init' :: [Int] -> [Int]
init' nums
  |nums /= [] = (take((length nums) -1) nums)
  |otherwise = error "Invalid Input"


init'' :: [Int] -> [Int]
init'' [x] = [ ]
init'' (x:xs) = x:init'' xs 


elemAt :: Int -> [Int] -> Int 
elemAt 0 (x:xs) = x
elemAt y (x:xs) = (elemAt (y-1) xs)  
elemAt _ _ = error "Invalid Index"


numTimes :: Int -> [Int] -> Int
numTimes y (x:xs) 
  |y==x =  (1+ (numTimes y xs))
  |y/=x =  (0+ (numTimes y xs))
numTimes y _ = 0


lowerFirstLetter :: String -> String
lowerFirstLetter (x:xs)
  | xs /= [] = ((toLower x):xs)
  |otherwise = error "There was a problem" 	

 
and' :: [Bool] -> Bool
and' [True,True] = True
and' [_ , _] = False
and' (x:xs) = and' xs  
 

or' :: [Bool] -> Bool
or' [False,False] = False
or' [_ , _] = True
or' (x:xs)= or' xs


iSort' :: [(Float,Int,String)] -> [(Float,Int,String)]
iSort' [] = []
iSort' (x:xs) = ins x (iSort' xs)


ins :: (Float,Int,String) -> [(Float, Int, String)] -> [(Float,Int,String)]
ins (x,y,z) [ ] = [(x,y,z)]
ins (x,y,z) ((x1,y1,z1):xs)
  |y < y1 = ((x,y,z):(x1,y1,z1):xs)
  |otherwise = ((x1,y1,z1):(ins (x,y,z) xs))



--DEFINITLEY NEEDS A WHERE CLAUSE
merge :: [Int] -> [Int] -> [Int]
merge (x:xs) (y:ys) 
  |x >= y  =  ((x:[y]) ++ (merge xs ys))
  |y >= x  =  ((y:[x]) ++ (merge xs ys))
merge (_:xs) (_:ys) = xs ++ ys 

 
